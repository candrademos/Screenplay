
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:4.0.14"
    }
}
plugins {
    id "org.sonarqube" version "3.4.0.2513"
    id "java"
    id "idea"
}


tasks.register('backupFeatures') {
    dependsOn(clean, clearReports)
    doLast {
        copy {
            from "src/test/resources/features"
            into "build/originalFeatures"
        }
    }
}

tasks.register('restoreFeatures') {
    doLast {
        copy {
            from "build/originalFeatures"
            into "src/test/resources/features"
        }

        delete "build/originalFeatures"

        copy {
            from "src/test/resources/assets"
            into "target/site/serenity/assets"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

compileJava.dependsOn(backupFeatures)




apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"

sourceCompatibility = 1.7
targetCompatibility = 1.7

ext {
    SERENITY_VERSION = '4.0.14'
    JUNIT_PLATFORM_VERSION = '1.10.0'
    CUCUMBER_JUNIT_PLATFORM_VERSION = '7.14.0'
    JUNIT_JUPITER_VERSION = '5.10.0'
    JUNIT_VINTAGE_VERSION = '5.10.0'
    LOGBACK_CLASSIC_VERSION = '1.2.10'
    ASSERTJ_CORE_VERSION = '3.22.0'
}

dependencies {
    implementation "net.serenity-bdd:serenity-core:${SERENITY_VERSION}"
    implementation "net.serenity-bdd:serenity-junit:${SERENITY_VERSION}"
    implementation "net.serenity-bdd:serenity-junit5:${SERENITY_VERSION}"
    implementation "net.serenity-bdd:serenity-screenplay:${SERENITY_VERSION}"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:${SERENITY_VERSION}"
    implementation "net.serenity-bdd:serenity-ensure:${SERENITY_VERSION}"
    implementation "net.serenity-bdd:serenity-cucumber:${SERENITY_VERSION}"
    testImplementation "org.junit.platform:junit-platform-launcher:${JUNIT_PLATFORM_VERSION}"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${CUCUMBER_JUNIT_PLATFORM_VERSION}"
    testImplementation "org.junit.platform:junit-platform-suite:${JUNIT_PLATFORM_VERSION}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${JUNIT_JUPITER_VERSION}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${JUNIT_VINTAGE_VERSION}"
    testImplementation "net.serenity-bdd:serenity-saucelabs:${SERENITY_VERSION}"
    implementation "ch.qos.logback:logback-classic:${LOGBACK_CLASSIC_VERSION}"
    testImplementation "org.assertj:assertj-core:${ASSERTJ_CORE_VERSION}"
}

test {
    systemProperties System.getProperties()
    maxParallelForks = 8
    systemProperty "file.encoding", "utf-8"
    systemProperty "cucumber.options", System.getProperty("cucumber.options")
    //for karate
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    outputs.upToDateWhen { false }

}

serenity {
    reports = ["single-page-html"]

    requirementsDir = "src/test/resources/features"
}

gradle.startParameter.continueOnFailure = true
test.finalizedBy(aggregate, reports, restoreFeatures)
